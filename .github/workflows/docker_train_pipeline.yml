###############################################################################
# Workflow  : Dockerized Training Pipeline (CI) + Linting
# Triggered :
#   • push        → main, develop
#   • pull_request→ main, develop
#   • manual run  → workflow_dispatch
# Purpose   :
#   1. Lint and format check the codebase
#   2. Build the project Docker image in CI and push to GCP Artifact Registry
#   3. Launch a short CPU‑only training run inside the container
#      (downloads data via DVC + logs to Weights & Biases)
#   4. Run tests to verify code quality and functionality
###############################################################################

name: docker-train-lint

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Ruff
        run: python -m pip install ruff

      - name: Run Ruff Check
        run: ruff format --check .

      - name: Run Ruff Linter
        run: ruff check .

  build:
    name: Build Docker Image
    needs: lint
    runs-on:
      group: default
      labels: ubuntu-latest-m
    timeout-minutes: 30
    env:
      LOCAL_IMAGE_NAME: team-zeal-project
      GCP_REGION: us-central1
      ARTIFACT_REGISTRY_REPO: team-zeal-project
      IMAGE_NAME_IN_REGISTRY: team-zeal-project
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Authenticate to Google Cloud
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # Configure Docker to use gcloud as a credential helper
      - name: Configure Docker for GCP Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker image to GCP Artifact Registry
        run: |
          GCP_PROJECT_ID='${{ secrets.GCP_PROJECT_ID }}'
          IMAGE_PATH_PREFIX="${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/${ARTIFACT_REGISTRY_REPO}/${IMAGE_NAME_IN_REGISTRY}"

          # Tag with 'latest', 'ci' and Git SHA
          TAG_LATEST="latest"
          TAG_CI="ci"
          TAG_SHA="${GITHUB_SHA::7}" # Short SHA

          echo "Building image: ${LOCAL_IMAGE_NAME}:${TAG_LATEST}"
          docker build -t "${LOCAL_IMAGE_NAME}:${TAG_LATEST}" .

          # Tag for GCP Registry
          docker tag "${LOCAL_IMAGE_NAME}:${TAG_LATEST}" "${IMAGE_PATH_PREFIX}:${TAG_LATEST}"
          docker tag "${LOCAL_IMAGE_NAME}:${TAG_LATEST}" "${IMAGE_PATH_PREFIX}:${TAG_CI}"
          docker tag "${LOCAL_IMAGE_NAME}:${TAG_LATEST}" "${IMAGE_PATH_PREFIX}:${TAG_SHA}"

          echo "Pushing images to GCP Artifact Registry"
          docker push "${IMAGE_PATH_PREFIX}:${TAG_LATEST}"
          docker push "${IMAGE_PATH_PREFIX}:${TAG_CI}"
          docker push "${IMAGE_PATH_PREFIX}:${TAG_SHA}"

          # Save registry image path as output variable for later jobs
          echo "registry_image_path=${IMAGE_PATH_PREFIX}" >> $GITHUB_ENV

      # Export image as tar file to share between jobs (keeping for compatibility)
      - name: Export Docker image
        run: docker save $LOCAL_IMAGE_NAME:latest > /tmp/image.tar

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/image.tar
          retention-days: 1

  train:
    name: Run Training
    needs: build
    runs-on:
      group: default
      labels: ubuntu-latest-m
    timeout-minutes: 240
    env:
      GCP_REGION: us-central1
      ARTIFACT_REGISTRY_REPO: team-zeal-project
      IMAGE_NAME_IN_REGISTRY: team-zeal-project
      SA_KEY: ${{ secrets.GDRIVE_SA_KEY_JSON_CONTENT }}
      WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
      DOCKER_MEMORY_OPTS: "--memory=8g --memory-swap=8g --shm-size=4g"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Authenticate to Google Cloud
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # Configure Docker to use gcloud as a credential helper
      - name: Configure Docker for GCP Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Pull Docker image from GCP Artifact Registry
        run: |
          GCP_PROJECT_ID='${{ secrets.GCP_PROJECT_ID }}'
          IMAGE_PATH="${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/${ARTIFACT_REGISTRY_REPO}/${IMAGE_NAME_IN_REGISTRY}:latest"

          echo "Pulling image: ${IMAGE_PATH}"
          docker pull "${IMAGE_PATH}"
          echo "registry_image_path=${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/${ARTIFACT_REGISTRY_REPO}/${IMAGE_NAME_IN_REGISTRY}" >> $GITHUB_ENV

      # In docker_train_pipeline.yml, train job
      # Depending on the branch, set different training parameters
      # and run the training command inside the Docker container
      - name: Run DVC pull + training in Docker
        run: |
          # Set parameters based on branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            EPOCHS=10
            MODEL="resnet18"
            echo "Running on main branch - using $MODEL with $EPOCHS epochs"
          else
            EPOCHS=1
            MODEL="resnet10t"
            echo "Running on develop branch - using $MODEL with $EPOCHS epochs"
          fi

          docker run --rm \
            -v "$PWD:/app" \
            -e GDRIVE_CREDENTIALS_DATA_CONTENT="$SA_KEY" \
            -e WANDB_API_KEY="$WANDB_API_KEY" \
            -e CI_MODE=true \
            $DOCKER_MEMORY_OPTS \
            "${registry_image_path}:latest" \
            make train ARGS="training.epochs=$EPOCHS model.name=$MODEL data.dataloader_workers=2 run.device=cpu cml.enabled=true"

      - name: Upload training metrics and plots for CML
        # For develop branch, upload only if explicitly needed
        # if: success() && (github.ref == 'refs/heads/main' || github.event_name == 'pull_request')
        uses: actions/upload-artifact@v4
        with:
          name: cml-artifacts
          path: |
            cml_plots/
            cml_metrics.json
          retention-days: 1

      - name: Setup gcloud for Storage operations
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      # Upload the best model to GCP bucket
      - name: Upload model to GCP
        # if: success() && github.ref == 'refs/heads/main'
        run: |
          GCP_PROJECT_ID='${{ secrets.GCP_PROJECT_ID }}'
          MODEL_BUCKET="gs://team-zeal-models"
          MODEL_PATH="${MODEL_BUCKET}/ci-models/${GITHUB_SHA::7}_model.pth"
          gsutil ls $MODEL_BUCKET || gsutil mb -p $GCP_PROJECT_ID -l ${GCP_REGION} $MODEL_BUCKET
          gsutil cp best_model.pth $MODEL_PATH
          echo "Model uploaded to: $MODEL_PATH"

  test:
    name: Run Tests
    needs: build
    runs-on:
      group: default
      labels: ubuntu-latest-m
    timeout-minutes: 30
    env:
      GCP_REGION: us-central1
      ARTIFACT_REGISTRY_REPO: team-zeal-project
      IMAGE_NAME_IN_REGISTRY: team-zeal-project
      SA_KEY: ${{ secrets.GDRIVE_SA_KEY_JSON_CONTENT }}
      DOCKER_MEMORY_OPTS: "--memory=8g --memory-swap=8g --shm-size=4g"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Authenticate to Google Cloud
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # Configure Docker to use gcloud as a credential helper
      - name: Configure Docker for GCP Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Pull Docker image from GCP Artifact Registry
        run: |
          GCP_PROJECT_ID='${{ secrets.GCP_PROJECT_ID }}'
          IMAGE_PATH="${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/${ARTIFACT_REGISTRY_REPO}/${IMAGE_NAME_IN_REGISTRY}:latest"
          echo "Pulling image: ${IMAGE_PATH}"
          docker pull "${IMAGE_PATH}"
          echo "registry_image_path=${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/${ARTIFACT_REGISTRY_REPO}/${IMAGE_NAME_IN_REGISTRY}" >> $GITHUB_ENV

      - name: Run tests in Docker
        run: |
          echo "Running tests with image: ${registry_image_path}:latest"
          docker run --rm \
            -v "$PWD:/app" \
            -e GDRIVE_CREDENTIALS_DATA_CONTENT="$SA_KEY" \
            -e CI_MODE=true \
            $DOCKER_MEMORY_OPTS \
            "${registry_image_path}:latest" \
            make test
