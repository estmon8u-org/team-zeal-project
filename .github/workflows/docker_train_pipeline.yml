###############################################################################
# Workflow  : Dockerized Training Pipeline (CI) + Linting
# Triggered :
#   • push        → main, develop
#   • pull_request→ main, develop
#   • manual run  → workflow_dispatch
# Purpose   :
#   1. Lint and format check the codebase
#   2. Build the project Docker image in CI
#   3. Launch a short CPU‑only training run inside the container
#      (downloads data via DVC + logs to Weights & Biases)
#   4. Run tests to verify code quality and functionality
###############################################################################

name: docker-train-lint

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Ruff
        run: python -m pip install ruff

      - name: Run Ruff Formatter
        run: ruff format .

      - name: Run Ruff Linter
        run: ruff check --fix .

  build:
    name: Build Docker Image
    needs: lint
    runs-on:
      group: default
      labels: ubuntu-latest-m
    timeout-minutes: 60
    env:
      IMAGE_NAME: team-zeal-project
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          echo "Building image: $IMAGE_NAME:latest"
          docker build -t $IMAGE_NAME:latest .

      # Export image as tar file to share between jobs
      - name: Export Docker image
        run: docker save $IMAGE_NAME:latest > /tmp/image.tar

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/image.tar
          retention-days: 1

  train:
    name: Run Training
    needs: build
    runs-on:
      group: default
      labels: ubuntu-latest-m
    timeout-minutes: 120
    env:
      IMAGE_NAME: team-zeal-project
      SA_KEY: ${{ secrets.GDRIVE_SA_KEY_JSON_CONTENT }}
      WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
      DOCKER_MEMORY_OPTS: "--memory=8g --memory-swap=8g --shm-size=4g"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: docker load < /tmp/image.tar

      - name: Run DVC pull + training in Docker
        run: |
          echo "Running training with image: $IMAGE_NAME:latest"
          docker run --rm \
            -v "$PWD:/app" \
            -e GDRIVE_CREDENTIALS_DATA_CONTENT="$SA_KEY" \
            -e WANDB_API_KEY="$WANDB_API_KEY" \
            -e CI_MODE=true \
            $DOCKER_MEMORY_OPTS \
            $IMAGE_NAME:latest \
            make train HYDRA_ARGS="training.epochs=3 data.dataloader_workers=2 run.device=cpu"

  test:
    name: Run Tests
    needs: build
    runs-on:
      group: default
      labels: ubuntu-latest-m
    timeout-minutes: 60
    env:
      IMAGE_NAME: team-zeal-project
      SA_KEY: ${{ secrets.GDRIVE_SA_KEY_JSON_CONTENT }}
      DOCKER_MEMORY_OPTS: "--memory=8g --memory-swap=8g --shm-size=4g"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: docker load < /tmp/image.tar

      - name: Run tests in Docker
        run: |
          echo "Running tests with image: $IMAGE_NAME:latest"
          docker run --rm \
            -v "$PWD:/app" \
            -e GDRIVE_CREDENTIALS_DATA_CONTENT="$SA_KEY" \
            -e CI_MODE=true \
            $DOCKER_MEMORY_OPTS \
            $IMAGE_NAME:latest \
            make test

      # - name: Archive DVC metrics (Keep if you use it)
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: dvc-metrics
      #     path: dvc_plots/metrics.json
