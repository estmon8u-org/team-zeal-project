###############################################################################
# Workflow  : Dockerized Training Pipeline (CI) + Linting
# Triggered :
#   • push        → main, develop
#   • pull_request→ main, develop
#   • manual run  → workflow_dispatch
# Purpose   :
#   1. Lint and format check the codebase
#   2. Build the project Docker image in CI and push to GCP Artifact Registry
#   3. Launch a short CPU‑only training run inside the container
#      (downloads data via DVC + logs to Weights & Biases)
#   4. Run tests to verify code quality and functionality
###############################################################################

name: docker-train-lint

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Ruff
        run: python -m pip install ruff

      - name: Run Ruff Formatter Check
        run: ruff format --check .

      - name: Run Ruff Linter
        run: ruff check .

  build_push_train_test:
    name: Build, Push Docker & Train/Test
    needs: lint
    runs-on:
      group: default
      labels: ubuntu-latest-m
    timeout-minutes: 120
    env:
      GCP_REGION: us-central1
      ARTIFACT_REGISTRY_REPO: team-zeal-project
      IMAGE_NAME_IN_REGISTRY: team-zeal-project
      SA_KEY_DVC: ${{ secrets.GDRIVE_SA_KEY_JSON_CONTENT }}
      WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
      DOCKER_MEMORY_OPTS: "--memory=8g --memory-swap=8g --shm-size=4g"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Authenticate to Google Cloud
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # Configure Docker to use gcloud as a credential helper
      - name: Configure Docker for GCP Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker image to GCP Artifact Registry
        run: |
          GCP_PROJECT_ID_FROM_SECRET='${{ secrets.GCP_PROJECT_ID }}'
          IMAGE_PATH_PREFIX="${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT_ID_FROM_SECRET}/${ARTIFACT_REGISTRY_REPO}/${IMAGE_NAME_IN_REGISTRY}"

          # Tag with 'ci' and Git SHA
          TAG_CI="ci"
          TAG_SHA="${GITHUB_SHA::7}" # Short SHA

          echo "Building image: ${IMAGE_PATH_PREFIX}"
          docker build -t "${IMAGE_PATH_PREFIX}:${TAG_CI}" -t "${IMAGE_PATH_PREFIX}:${TAG_SHA}" .

          echo "Pushing image: ${IMAGE_PATH_PREFIX}:${TAG_CI}"
          docker push "${IMAGE_PATH_PREFIX}:${TAG_CI}"

          echo "Pushing image: ${IMAGE_PATH_PREFIX}:${TAG_SHA}"
          docker push "${IMAGE_PATH_PREFIX}:${TAG_SHA}"
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

      - name: Run DVC pull + training in Docker
        run: |
          # Use the locally built tag for this step
          LOCAL_IMAGE_TAG="ci"
          IMAGE_PATH_PREFIX_LOCAL="${GCP_REGION}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${ARTIFACT_REGISTRY_REPO}/${IMAGE_NAME_IN_REGISTRY}"
          FULL_IMAGE_NAME_FOR_RUN="${IMAGE_PATH_PREFIX_LOCAL}:${LOCAL_IMAGE_TAG}"

          echo "Running DVC pull + training in Docker using image: $FULL_IMAGE_NAME_FOR_RUN"
          docker run --rm \
            -v "$PWD:/app" \
            -e GDRIVE_CREDENTIALS_DATA_CONTENT="$SA_KEY_DVC" \
            -e WANDB_API_KEY="$WANDB_API_KEY" \
            -e CI_MODE=true \
            $DOCKER_MEMORY_OPTS \
            "${IMAGE_PATH_PREFIX_LOCAL}:${LOCAL_IMAGE_TAG}" \
            make train HYDRA_ARGS="training.epochs=3 data.dataloader_workers=2 run.device=cpu"

      - name: Run tests in Docker
        run: |
          LOCAL_IMAGE_TAG="ci"
          IMAGE_PATH_PREFIX_LOCAL="${GCP_REGION}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${ARTIFACT_REGISTRY_REPO}/${IMAGE_NAME_IN_REGISTRY}"
          FULL_IMAGE_NAME_FOR_RUN="${IMAGE_PATH_PREFIX_LOCAL}:${LOCAL_IMAGE_TAG}"

          echo "Running tests in Docker using image: $FULL_IMAGE_NAME_FOR_RUN"
          docker run --rm \
            -v "$PWD:/app" \
            -e GDRIVE_CREDENTIALS_DATA_CONTENT="$SA_KEY_DVC" \
            -e CI_MODE=true \
            $DOCKER_MEMORY_OPTS \
            "${IMAGE_PATH_PREFIX_LOCAL}:${LOCAL_IMAGE_TAG}" \
            make test
