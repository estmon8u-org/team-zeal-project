###############################################################################
# Workflow  : Dockerized Training Pipeline (CI)
# Triggered :
#   • push        → main, develop, phase2-test
#   • pull_request→ main, develop
#   • manual run  → workflow_dispatch
# Purpose   :
#   1. Build the project Docker image in CI
#   2. Launch a short CPU‑only training run inside the container
#      (downloads data via DVC + logs to Weights & Biases)
#   3. Run tests to verify code quality and functionality
###############################################################################

name: docker-train

on:
  push:
    branches: [main, develop, phase2-test]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  train:
    runs-on: ubuntu-latest         # GitHub hosted Ubuntu runner
    timeout-minutes: 120           # Fail job if it exceeds 2 h

    env:                           # Job‑wide env vars (available to all steps)
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
      SA_KEY: ${{ secrets.GDRIVE_SA_KEY_JSON_CONTENT }}
      WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}

    steps:
      #########################################################################
      # 1. Checkout code (with full history for DVC)
      #########################################################################
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0           # DVC may need git tags / full history

      #########################################################################
      # 2. Buildx (multi‑platform build tool)
      #########################################################################
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      #########################################################################
      # 3. Build image
      #########################################################################
      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:ci .

      #########################################################################
      # 4. Run training inside the image
      #########################################################################
      - name: Run DVC pull + training in Docker
        run: |
          docker run --rm \
            -v "$PWD:/app" \
            -e GDRIVE_CREDENTIALS_DATA_CONTENT="$SA_KEY" \
            -e WANDB_API_KEY="$WANDB_API_KEY" \
            -e CI_MODE=true \ 
            $IMAGE_NAME:ci \
            make train HYDRA_ARGS="training.epochs=3 data.dataloader_workers=2 run.device=cpu"
      
      #########################################################################
      # 5. Run tests inside the image
      #########################################################################
      - name: Run tests in Docker
        run: |
          docker run --rm \
            -v "$PWD:/app" \
            $IMAGE_NAME:ci \
            make test

      #########################################################################
      # 5. (Optional) Upload artifacts (disabled by default)
      #########################################################################
      # - name: Archive DVC metrics
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: dvc-metrics
      #     path: dvc_plots/metrics.json