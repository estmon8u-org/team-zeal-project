name: CML Report

on:
  workflow_run:
    workflows: ["docker-train-lint"]
    types:
      - completed
    branches: [main, develop]
  workflow_dispatch:

jobs:
  generate-report:
    name: Generate CML Report
    # Only run if the docker-train-lint workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on:
      group: default
      labels: ubuntu-latest-m
    timeout-minutes: 120
    env:
      GCP_REGION: us-central1
      ARTIFACT_REGISTRY_REPO: team-zeal-project
      IMAGE_NAME_IN_REGISTRY: team-zeal-project
      SA_KEY: ${{ secrets.GDRIVE_SA_KEY_JSON_CONTENT }}
      WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
      DOCKER_MEMORY_OPTS: "--memory=8g --memory-swap=8g --shm-size=4g"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Important: check out the PR that triggered the workflow_run
          ref: ${{ github.event.workflow_run.head_branch }}
          fetch-depth: 0

      - name: Setup CML
        uses: iterative/setup-cml@v1

      # Authenticate to Google Cloud
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # Configure Docker to use gcloud as a credential helper
      - name: Configure Docker for GCP Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Pull Docker image from GCP Artifact Registry
        run: |
          GCP_PROJECT_ID='${{ secrets.GCP_PROJECT_ID }}'
          IMAGE_PATH="${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/${ARTIFACT_REGISTRY_REPO}/${IMAGE_NAME_IN_REGISTRY}:latest"

          echo "Pulling image: ${IMAGE_PATH}"
          docker pull "${IMAGE_PATH}"
          echo "registry_image_path=${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/${ARTIFACT_REGISTRY_REPO}/${IMAGE_NAME_IN_REGISTRY}" >> $GITHUB_ENV

      - name: Run CML training in Docker
        run: |
          echo "Running CML training with image: ${registry_image_path}:latest"
          docker run --rm \
            -v "$PWD:/app" \
            -e GDRIVE_CREDENTIALS_DATA_CONTENT="$SA_KEY" \
            -e WANDB_API_KEY="$WANDB_API_KEY" \
            -e CI_MODE=true \
            $DOCKER_MEMORY_OPTS \
            "${registry_image_path}:latest" \
            make train HYDRA_ARGS="training.epochs=3 data.dataloader_workers=2 run.device=cpu cml.enabled=true"

      - name: Generate CML Report
        env:
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "## Model Training Results" > report.md
          echo "### Metrics Summary" >> report.md

          # Add metrics from JSON
          if [ -f "cml_metrics.json" ]; then
            BEST_ACC=$(cat cml_metrics.json | jq -r .best_val_accuracy)
            FINAL_ACC=$(cat cml_metrics.json | jq -r .final_val_accuracy)
            FINAL_LOSS=$(cat cml_metrics.json | jq -r .final_val_loss)
            TRAIN_TIME=$(cat cml_metrics.json | jq -r .total_training_time_sec)
            BEST_EPOCH=$(cat cml_metrics.json | jq -r .best_epoch)

            echo "| Metric | Value |" >> report.md
            echo "| --- | --- |" >> report.md
            echo "| Best Validation Accuracy | ${BEST_ACC}% (epoch ${BEST_EPOCH}) |" >> report.md
            echo "| Final Validation Accuracy | ${FINAL_ACC}% |" >> report.md
            echo "| Final Validation Loss | ${FINAL_LOSS} |" >> report.md
            echo "| Training Time | ${TRAIN_TIME} seconds |" >> report.md
          fi

          echo -e "\n### Learning Curves" >> report.md

          # Add plots
          if [ -f "cml_plots/loss_plot.png" ]; then
            cml-publish cml_plots/loss_plot.png --md >> report.md
          fi

          if [ -f "cml_plots/accuracy_plot.png" ]; then
            cml-publish cml_plots/accuracy_plot.png --md >> report.md
          fi

          # Post the report as a comment on the PR
          # Get PR number from the workflow run event
          PR_NUMBER=$(jq -r '.pull_requests[0].number // empty' <<< '${{ toJson(github.event.workflow_run) }}')
          if [ -n "$PR_NUMBER" ]; then
            cml comment create report.md --target-pull-request $PR_NUMBER
          else
            # If PR number is not available, just post the comment to the commit
            cml comment create report.md
          fi
